### checkerboard parameters
# side length of the chessboard squares
# chessboard_cell_size: 0.05
chessboard_cell_size: 0.018

# number of arm links
# int
#link_Count: 5 # Robotino
link_Count: 6 # ROW3-1

# number of checkerboard calibration points (in x- and y-direction), i.e. those points where 4 squares meet
# chessboard_pattern_size: [6,4]
chessboard_pattern_size: [9,6]

### initial values for transformation estimates
# insert the values as x, y, z, yaw (rot around z), pitch (rot around y'), roll (rot around x'')
# transform from base to first link of arm.
T_base_to_armbase_initial: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

# insert the values as x, y, z, yaw (rot around z), pitch (rot around y'), roll (rot around x'')
# transform from end effector to checkerboard
T_endeff_to_checkerboard_initial: [0.7, -0.45, -0.5, 0, -1.1, 0]

### checkerboard observation positions for capturing calibration images
# list of robot link configurations (angles per link in [rad]) for observing the checkerboard attachhed to robot's end effector
# includes link_Count parameters per entry.
# Robotino
#arm_configurations: [0, 0, 0, 0, 0,
#                     0.1, 0, 0, 0, 0,
#                     -0.1, 0, 0, 0, 0,
#                     0.2, 0, 0, 0, 0,
#                     -0.2, 0, 0, 0, 0,
#                     0.3, 0, 0, 0, 0,
#                     -0.3, 0, 0, 0, 0,
#                     0, 0, 0, 0.2, 0,
#                     0, 0, 0, -0.2, 0,
#                     0, 0, 0, 0.35, 0,
#                     0, 0, 0, -0.35, 0,
#                     0, 0, 0, 0.45, 0,
#                     0, 0, 0, -0.45, 0,
#                     0, 0, 0, 0, 0.1,
#                     0, 0, 0, 0, -0.1,
#                     0, 0, 0, 0, 0.2,
#                     0, 0, 0, 0, -0.2,
#                     0, 0, 0, 0, 0.3,
#                     0, 0, 0, 0, -0.3]

# ROW3-1
arm_configurations: [0, 0, 0, 0, 0, 0,
                     0.1, 0, 0, 0, 0, 0,
                     -0.1, 0, 0, 0, 0, 0,
                     0.2, 0, 0, 0, 0, 0,
                     -0.2, 0, 0, 0, 0, 0]


# link names for the robot coordinate systems
# string
# the robot base frame [the transformation between laser scanner and base should be accomplished before, the transform from base_frame to armbase_frame will be calibrated by this program]
base_frame: "base_link"

# arm frame attached to robot base
# string
armbase_frame: "arm_base_link"


# end effector frame attached to arm
# string
#endeff_frame: "hand_base_link" # Robotino
endeff_frame: "arm_gripper_frame"

# this is the camera coordinate system which refers to the color image sensor [the transformations between base_frame and camera_optical_frame should be available from tf]
camera_optical_frame: "kinect_rgb_optical_frame"

# Topic to control the arm joints.
# string
#arm_joint_controller_command: "/arm_controller/joint_group_position_controller/command" # Robotino
arm_joint_controller_command: "/arm/joint_trajectory_controller/command" # RAW3-1

# Topic to retrieve the current arm state
# string
#arm_state_command: "/arm_controller/joint_states" # Robotino
arm_state_command: "/arm/joint_states" # RAW3-1

# storage folder that holds the calibration output
# string
calibration_storage_path: "~/.ros/robotino_calibration/calibration"


### program sequence
# loads calibration images and transforms from disk if set to true
# bool
load_images: false

# number of optimization iterations
# int
optimization_iterations: 100
