### checkerboard parameters
# side length of the chessboard squares
# chessboard_cell_size: 0.05
chessboard_cell_size: 0.018

# number of checkerboard calibration points (in x- and y-direction), i.e. those points where 4 squares meet
# chessboard_pattern_size: [6,4]
chessboard_pattern_size: [9,6]

### initial values for transformation estimates
# insert the values as x, y, z, yaw (rot around z), pitch (rot around y'), roll (rot around x'')
# transform from base to first link of arm.
T_base_to_armbase_initial: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

# insert the values as x, y, z, yaw (rot around z), pitch (rot around y'), roll (rot around x'')
# transform from end effector to checkerboard
T_endeff_to_checkerboard_initial: [0, 0, 0, 0, 0, 0]

### checkerboard observation positions for capturing calibration images
# list of robot configurations for observing the checkerboard measured relative to the landmark_reference_nav coordinate system that is similarly aligned as the robot's base_link facing the marker (e.g. checkerboard)
# includes 3 parameters per entry: end effector pose: x, y, z
endeff_configurations: [-1.5, -0.17, 0,
                       -1.5, -0.12, 0.03
                       -1.5, -0.10, 0.06,
                       -1.5, -0.05, 0.02,
                       -1.5, -0.02, -0.01,
                       -1.5, 0, -0.06,
                        -1, 0.02, -1,
                       -0.2, 0.05, -0.5,
                       0, 0.1, -0.2,
                       0.05, 0.13, 0.05,
                       8, 0.17, 0.1,
                       1, 0.17, 0.12,
                       1.2, 0.17, 0.8,
                       1.5, 0.17, 0]


# link names for the robot coordinate systems
# string
# the robot base frame [the transformation between laser scanner and base should be accomplished before, the transform from base_frame to torso_lower_framewill be calibrated by this program]
base_frame: "base_link"

# arm frame attached to robot base
armbase_frame: "arm_link"

# end effector fram attached to arm
endeff_frame: "endeff_frame"

# storage folder that holds the calibration output
# string
calibration_storage_path: "~/.ros/robotino_calibration/calibration"


### program sequence
# loads calibration images and transforms from disk if set to true
# bool
load_images: false

# number of optimization iterations
# int
optimization_iterations: 100
